#!/bin/zsh

set -e

cnf="${HOME}/.config/dymium/databases.yaml"

declare -a dbs
init=0
kill=0
foreground=0
show_databases=0

usage () {
    echo "Usage: $0 [-s | --show] [-k | --kill] [-i | --init] [-f | --foreground] db..."
}

while true
do
    case "$1" in
	-s | --show) show_databases=1;;
	-i | --init) init=1;;
	-k | --kill) kill=1;;
	-f | --foreground) foreground=1;;
	-h | --help) usage; exit;;
	"") break;;
	*) dbs+=("$1");;
    esac
    shift
done

main() {

    [ -f $cnf ] || {
	echo "Configuration file $cnf not found"
	exit -1
    }
    
    [ -z "$(hash yq 2>&1)" ] || {
	echo "Please install `yq` utility"
	exit -1
    }
    
    (( $init + $kill + $foreground + $show_databases > 1 )) && {
	echo "--show, --forground, --kill and --init flags can not be specified simultaneously"
	exit -1
    }

    [[ $show -eq 1 && ${#dbs} -gt 0 ]] && {
	echo "--show flag does not need databases names specification"
	exit -1
    }

    [[ $init -eq 1 && ${#dbs} -gt 1 ]] && {
	echo "You are trying to initialize multiple databases at once"
	echo "Do it one by one, please"
	exit -1	
    }
    
    [[ $foreground -eq 1 && ${#dbs} -gt 1 ]] && {
	echo "You are trying to run multiple databases in foreground"
	echo "Do it one by one, please"
	exit -1
    }
    
    [[ ${#dbs} -eq 0 && $show_databases -eq 0 ]] && {
	echo "no databases specified"
	exit -1
    }
    
    [[ $show_databases -eq 1 ]] && show_databases $confs

    get_conf $dbs
    confs=(${reply[@]})

    [[ $kill -eq 1 ]] && kill_dockers $confs

    start_dockers $confs
}

get_conf() {
    local dbs=($@)
    local e='.[] | to_entries |
             .[] | select(.key == strenv(DB)) |
             .value | select(.active and .access == "docker") | to_json(0)'
    declare -a confs
    for db in ${dbs[@]}; do
	declare -a c
	c=(${(f)"$(DB=$db yq $e $cnf)"})
	case "${#c[@]}" in
	    0) echo "No active docker database with the name ${$db} is defined"
	       exit -1
	       ;;
	    1) confs+=${c[@]}
	       ;;
	    *) echo "Multiple active docker databases with the name ${$db} are defined"
	       exit -1
	       ;;
	esac
    done
    reply=(${confs[@]})
}


kill_dockers() {
    local confs=($@)
    for c in $confs[@]; do
	docker stop "$(echo -n $c | yq -p j '.name')"
    done
    exit 0
}

show_databases() {
    yq '.[] | to_entries | .[] | select(.value.active and .value.access == "docker") | .key' $cnf
    exit 0
}

start_dockers() {
    local confs=($@)
    for c in $confs[@]; do
	t=$(echo -n $c | yq -p j '.type')
	n=$(echo -n $c | yq -p j '.name')
	echo "Starting $t docker as $n..."
	case $t in
	    postgres) start_postgres_docker $c;;
	    mssql) start_mssql_docker $c;;
	    mysql) start_mysql_docker $c;;
	    oracle) start_oracle_docker $c;;
	    *) echo "Don't know how to run $t docker"
	       exit -1
	       ;;
	esac
    done
}

start_postgres_docker() {

    docker_args $1
    args=(${reply[@]})
    
    [[ $init -eq 1 ]] && {
	args+=(-e "POSTGRES_PASSWORD=$(yqv $c '.users.postgres.password')")
    }
    args+=(postgres:14)
    
    echo docker ${args[@]}
    docker ${args[@]}
}

start_mysql_docker() {

    docker_args $1
    args=(${reply[@]})
    
    [[ $init -eq 1 ]] && {
	args+=(-e "MYSQL_ROOT_PASSWORD=$(yqv $c '.users.mysql.password')")
    }
    
    args+=(mysql)

    echo docker ${args[@]}
    docker ${args[@]}
}

start_mssql_docker() {

    docker_args $1
    args=(${reply[@]})
    
    [[ $init -eq 1 ]] && {
	args+=(-e  "ACCEPT_EULA=Y"
	       -e "SA_PASSWORD=$(yqv $c '.users.sa.password')")
    }
    
    # args+=(mcr.microsoft.com/mssql/server:2022-latest)
    args+=(mcr.microsoft.com/azure-sql-edge)
    
    echo docker ${args[@]}
    docker ${args[@]}
}

start_oracle_docker() {

    docker_args $1
    args=(${reply[@]})
    
    [[ $init -eq 1 ]] && {
	args+=(-e "ORACLE_PWD=$(yqv $c '.users.sys.password')")
    }

    args+=(container-registry.oracle.com/database/express:21.3.0-xe)
    echo docker ${args[@]}
    docker ${args[@]}
}

docker_args() {
    local c=$1
    local n=$(yqv $c '.name')
    local ePath="$(yqv $c '.config.ePath')"
    ePath="${ePath/#\~/$HOME}"
    
    yq_ports $c
    local ports=(${reply[@]})
    
    reply=(run --rm --net dymium
	   --name $n
	   -v "${ePath}:$(yqv $c '.config.iPath')")
    reply+=(${ports[@]})
    [[ $foreground -eq 0 ]] && {
	reply+=(-d)
    }
}

yqv() {
    local c=$1
    local k=$2
    echo -n $c | yq -p j $k
}

yq_ports() {
    local c=$1
    local r=(${(f)"$(echo -n $c | yq -p j '.ports | .[] | .external + ":" + .internal')"})
    reply=()
    for p in ${r[@]}; do
	reply+=(-p $p)
    done
}

main
