name: Web server unit test
on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:    
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: ubuntu

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
              
      - uses: actions/setup-go@v3
        with:
          go-version: '^1.18.2' # The Go version to download (if necessary) and use.
      - run: go version    
      - name: ubuntu version
        run: cat /etc/os-release
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: update
        run: apt-get update
      - name: Install CA list
        run: apt-get install -y ca-certificates
      - name: Set up GCC
        run: apt-get install -y build-essential
      - name: Set up libpq
        run: apt-get install -y libpq5
      - name: Install zstd
        run: apt install zstd
      - name: Install git annex
        run: apt install git-annex
      - name: Install binary utilities
        env:
          AWS_ACCESS_KEY_ID: {{ secrets.DYMIUM_DEV_BINARY_UTILITIES_KEY }}
          AWS_SECRET_ACCESS_KEY: {{ secrets.DYMIUM_DEV_BINARY_UTILITIES_SECRET }}
          AWS_REGION: us-west-2
        run: |
          git annex init
          git annex enableremote dymium-dev-binary-utilities
          git annex get bin/
      - name: Run tests
        working-directory: ./web/go/src
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: postgres
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
          DATABASE_HOST: postgres
          DATABASE_PORT: 5432
          DATABASE_USER: postgres
          DATABASE_ADMIN_USER: postgres
          DATABASE_TLS: disable
          DATABASE_PASSWORD: postgres
          DATABASE_ADMIN_PASSWORD: postgres

          AUTH0_ADMIN_DOMAIN: 'https://dymium-dev-admin.us.auth0.com/'
          AUTH0_ADMIN_CLIENT_ID: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
          AUTH0_ADMIN_CLIENT_SECRET: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
          AUTH0_ADMIN_REDIRECT_URL: 'https://admin.dymium.local:3000/auth/redirect'
          AUTH0_ADMIN_RETURN_URL: 'https://admin.dymium.local:3000/app/logout'
          AUTH0_ADMIN_AUDIENCE: 'https://admin.dymium.local/api/handler'
          AUTH0_ADMIN_ORGANIZATION: "org_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

          SPOOFCORP_KEY: "6874AB957AA1F505EC6ACC84162B131FA5513558BB64ACEF294388AE6ECDA9C9"          
          AUTH0_PORTAL_DOMAIN: 'https://dymium-dev.us.auth0.com/'
          AUTH0_PORTAL_CLIENT_ID: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
          AUTH0_PORTAL_CLIENT_SECRET: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
          AUTH0_PORTAL_REDIRECT_URL: 'https://portal.dymium.local:3001/auth/redirect'
          AUTH0_PORTAL_RETURN_URL: 'https://portal.dymium.local:3001/app/logout'
          AUTH0_PORTAL_AUDIENCE: 'https://portal.dymium.local/api/handler'

          MESH_PORT_RANGE: '30000-30050'
          SESSION_SECRET: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
          CUSTOMER_HOST: 'portal.dymium.local'
          ADMIN_HOST: 'admin.dymium.local'
          FILESYSTEM_ROOT: '../../assets/'
          AWS_LAMBDAS: '{ "DbAnalyzer": "localhost:9080", "DbSync": "localhost:9081" }'

        run: |
          mkdir -p ../assets/customer
          cp ../../js/packages/portal/public/logo.png ../assets/customer/
          go test -v ./...
