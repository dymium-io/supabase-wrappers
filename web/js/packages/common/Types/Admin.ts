// this file is automatically generated.
// !!! DO NOT EDIT !!!

import _ from 'lodash'



export let dirtyFlag = false
function doAlert(s) { console.log(s) }


export class Customer {
  private '_id': string | null
  private '_name': string
  private '_orgid': string
  private '_schema': string
  private '_domain': string
  private '_admingroup': string

  constructor() {
    this['_id'] = null
    this['_name'] = ''
    this['_orgid'] = ''
    this['_schema'] = ''
    this['_domain'] = ''
    this['_admingroup'] = ''
  }
  get id(): string | null { return this['_id'] }
  set id(__a__: any) {
    if(__a__ == null) {
      if(this['_id'] == null) { return }
      setDirtyFlag()
      this['_id'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_id'])) {
        setDirtyFlag()
        this['_id'] = __v__
      }
    }
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get orgid(): string { return this['_orgid'] }
  set orgid(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_orgid'])) {
      setDirtyFlag()
      this['_orgid'] = __v__
    }
  }
  get schema(): string { return this['_schema'] }
  set schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_schema'])) {
      setDirtyFlag()
      this['_schema'] = __v__
    }
  }
  get domain(): string { return this['_domain'] }
  set domain(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_domain'])) {
      setDirtyFlag()
      this['_domain'] = __v__
    }
  }
  get admingroup(): string { return this['_admingroup'] }
  set admingroup(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_admingroup'])) {
      setDirtyFlag()
      this['_admingroup'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(removeLeadingUnderscore(this)); }

  static fromJson(__a__: any): Customer {
    disableDF()
    let cls = new Customer()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.id = __a__['id'] == null ? null : __a__['id']
       cls.name = __a__['name']
       cls.orgid = __a__['orgid']
       cls.schema = __a__['schema']
       cls.domain = __a__['domain']
       cls.admingroup = __a__['admingroup']
    } else {
       doAlert(`Customer: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class DeleteCustomer {
  private '_id': string
  private '_schema': string

  constructor() {
    this['_id'] = ''
    this['_schema'] = ''
  }
  get id(): string { return this['_id'] }
  set id(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_id'])) {
      setDirtyFlag()
      this['_id'] = __v__
    }
  }
  get schema(): string { return this['_schema'] }
  set schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_schema'])) {
      setDirtyFlag()
      this['_schema'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(removeLeadingUnderscore(this)); }

  static fromJson(__a__: any): DeleteCustomer {
    disableDF()
    let cls = new DeleteCustomer()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.id = __a__['id']
       cls.schema = __a__['schema']
    } else {
       doAlert(`DeleteCustomer: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class GlobalUsage {
  private '_customers': string
  private '_bytesin': string
  private '_bytesout': string

  constructor() {
    this['_customers'] = ''
    this['_bytesin'] = ''
    this['_bytesout'] = ''
  }
  get customers(): string { return this['_customers'] }
  set customers(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_customers'])) {
      setDirtyFlag()
      this['_customers'] = __v__
    }
  }
  get bytesin(): string { return this['_bytesin'] }
  set bytesin(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_bytesin'])) {
      setDirtyFlag()
      this['_bytesin'] = __v__
    }
  }
  get bytesout(): string { return this['_bytesout'] }
  set bytesout(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_bytesout'])) {
      setDirtyFlag()
      this['_bytesout'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(removeLeadingUnderscore(this)); }

  static fromJson(__a__: any): GlobalUsage {
    disableDF()
    let cls = new GlobalUsage()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.customers = __a__['customers']
       cls.bytesin = __a__['bytesin']
       cls.bytesout = __a__['bytesout']
    } else {
       doAlert(`GlobalUsage: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

function stringReader(__dflt__) {
  return ((__a__) => {
    if(_.isString(__a__)) {
      return __a__
    }
    doAlert(`stringReader: ${__a__} is not a string`)
    return __dflt__
  })
}

function removeLeadingUnderscore(obj: any): any {
  if (Array.isArray(obj)) {
    return obj.map(val => removeLeadingUnderscore(val));
  } else if (typeof obj === 'object' && obj !== null) {
    return Object.keys(obj).reduce((newObj, key) => {
      const newKey = ( key.length > 0 && key[0] === '_' ) ? key.substring(1) : key;
      newObj[newKey] = removeLeadingUnderscore(obj[key]);
      return newObj;
    }, {} as any)
  } else {
    return obj;
  }
}

let setDirtyFlag = () => { dirtyFlag = true }
let [disableDF,enableDF] = (() => {
    let n = 0
    return [() => {
      if(n === 0) {
        setDirtyFlag = () => {}
        n = 1
      } else {
        n += 1
      }
    },
    () => {
      if(n === 1) {
        setDirtyFlag = () => { dirtyFlag = true }
        n = 0
      } else {
        n -= 1
      }
    }]
})()
