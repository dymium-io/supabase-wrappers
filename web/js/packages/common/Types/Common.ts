// this file is automatically generated.
// !!! DO NOT EDIT !!!

import _ from 'lodash'



export let dirtyFlag = false
function doAlert(s) { console.log(s) }

export type ConnectionType =
  | 'PostgreSQL'
  | 'MySQL'
  | 'MariaDB'
  | 'SqlServer'
  | 'OracleDB'

export type DataSemantics =
  | 'FamilyName'
  | 'Email'
  | 'SSN'

export class ConnectionRecord {
  private '_name': string
  private '_dbtype': string
  private '_address': string
  private '_port': number
  private '_dbname': string
  private '_useTLS': boolean
  private '_description': string
  private '_username': string | null
  private '_password': string | null
  private '_id': string | null
  private '_credid': string | null

  constructor() {
    this['_name'] = ''
    this['_dbtype'] = ''
    this['_address'] = ''
    this['_port'] = 0
    this['_dbname'] = ''
    this['_useTLS'] = false
    this['_description'] = ''
    this['_username'] = null
    this['_password'] = null
    this['_id'] = null
    this['_credid'] = null
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get dbtype(): string { return this['_dbtype'] }
  set dbtype(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_dbtype'])) {
      setDirtyFlag()
      this['_dbtype'] = __v__
    }
  }
  get address(): string { return this['_address'] }
  set address(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_address'])) {
      setDirtyFlag()
      this['_address'] = __v__
    }
  }
  get port(): number { return this['_port'] }
  set port(__a__: any) {
    let __v__ = intReader(0)(__a__)
    if(!_.isEqual(__v__,this['_port'])) {
      setDirtyFlag()
      this['_port'] = __v__
    }
  }
  get dbname(): string { return this['_dbname'] }
  set dbname(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_dbname'])) {
      setDirtyFlag()
      this['_dbname'] = __v__
    }
  }
  get useTLS(): boolean { return this['_useTLS'] }
  set useTLS(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_useTLS'])) {
      setDirtyFlag()
      this['_useTLS'] = __v__
    }
  }
  get description(): string { return this['_description'] }
  set description(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_description'])) {
      setDirtyFlag()
      this['_description'] = __v__
    }
  }
  get username(): string | null { return this['_username'] }
  set username(__a__: any) {
    if(__a__ == null) {
      if(this['_username'] == null) { return }
      setDirtyFlag()
      this['_username'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_username'])) {
        setDirtyFlag()
        this['_username'] = __v__
      }
    }
  }
  get password(): string | null { return this['_password'] }
  set password(__a__: any) {
    if(__a__ == null) {
      if(this['_password'] == null) { return }
      setDirtyFlag()
      this['_password'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_password'])) {
        setDirtyFlag()
        this['_password'] = __v__
      }
    }
  }
  get id(): string | null { return this['_id'] }
  set id(__a__: any) {
    if(__a__ == null) {
      if(this['_id'] == null) { return }
      setDirtyFlag()
      this['_id'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_id'])) {
        setDirtyFlag()
        this['_id'] = __v__
      }
    }
  }
  get credid(): string | null { return this['_credid'] }
  set credid(__a__: any) {
    if(__a__ == null) {
      if(this['_credid'] == null) { return }
      setDirtyFlag()
      this['_credid'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_credid'])) {
        setDirtyFlag()
        this['_credid'] = __v__
      }
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): ConnectionRecord {
    disableDF()
    let cls = new ConnectionRecord()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.name = __a__['name']
       cls.dbtype = __a__['dbtype']
       cls.address = __a__['address']
       cls.port = __a__['port']
       cls.dbname = __a__['dbname']
       cls.useTLS = __a__['useTLS']
       cls.description = __a__['description']
       cls.username = __a__['username'] == null ? null : __a__['username']
       cls.password = __a__['password'] == null ? null : __a__['password']
       cls.id = __a__['id'] == null ? null : __a__['id']
       cls.credid = __a__['credid'] == null ? null : __a__['credid']
    } else {
       doAlert(`ConnectionRecord: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class ConnectionResponse {
  private '_status': string
  private '_errormessage': string
  private '_data': Array<ConnectionRecord>

  constructor() {
    this['_status'] = ''
    this['_errormessage'] = ''
    this['_data'] = []
  }
  get status(): string { return this['_status'] }
  set status(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_status'])) {
      setDirtyFlag()
      this['_status'] = __v__
    }
  }
  get errormessage(): string { return this['_errormessage'] }
  set errormessage(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_errormessage'])) {
      setDirtyFlag()
      this['_errormessage'] = __v__
    }
  }
  get data(): Array<ConnectionRecord> { return this['_data'] }
  set data(__a__: any) {
    setDirtyFlag()
    this['_data'] = __a__
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): ConnectionResponse {
    disableDF()
    let cls = new ConnectionResponse()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.status = __a__['status']
       cls.errormessage = __a__['errormessage']
       cls.data = array1Reader(ConnectionRecord.fromJson)(__a__['data'])
    } else {
       doAlert(`ConnectionResponse: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class ConnectionsQuery {
  private '_status': string
  private '_errormessage': string | null
  private '_records': Array<ConnectionRecord> | null

  constructor() {
    this['_status'] = ''
    this['_errormessage'] = null
    this['_records'] = null
  }
  get status(): string { return this['_status'] }
  set status(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_status'])) {
      setDirtyFlag()
      this['_status'] = __v__
    }
  }
  get errormessage(): string | null { return this['_errormessage'] }
  set errormessage(__a__: any) {
    if(__a__ == null) {
      if(this['_errormessage'] == null) { return }
      setDirtyFlag()
      this['_errormessage'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_errormessage'])) {
        setDirtyFlag()
        this['_errormessage'] = __v__
      }
    }
  }
  get records(): Array<ConnectionRecord> | null { return this['_records'] }
  set records(__a__: any) {
    setDirtyFlag()
    this['_records'] = __a__
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): ConnectionsQuery {
    disableDF()
    let cls = new ConnectionsQuery()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.status = __a__['status']
       cls.errormessage = __a__['errormessage'] == null ? null : __a__['errormessage']
       cls.records = __a__['records'] == null ? null : array1Reader(ConnectionRecord.fromJson)(__a__['records'])
    } else {
       doAlert(`ConnectionsQuery: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class DatascopeRecord {
  private '_id': string | null
  private '_connection': string
  private '_connectionId': string | null
  private '_schema': string
  private '_table': string
  private '_typ': string
  private '_position': number
  private '_reference': Reference | null
  private '_action': string
  private '_col': string
  private '_semantics': string
  private '_dflt': string
  private '_isnullable': boolean

  constructor() {
    this['_id'] = null
    this['_connection'] = ''
    this['_connectionId'] = null
    this['_schema'] = ''
    this['_table'] = ''
    this['_typ'] = ''
    this['_position'] = 0
    this['_reference'] = null
    this['_action'] = ''
    this['_col'] = ''
    this['_semantics'] = ''
    this['_dflt'] = ''
    this['_isnullable'] = false
  }
  get id(): string | null { return this['_id'] }
  set id(__a__: any) {
    if(__a__ == null) {
      if(this['_id'] == null) { return }
      setDirtyFlag()
      this['_id'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_id'])) {
        setDirtyFlag()
        this['_id'] = __v__
      }
    }
  }
  get connection(): string { return this['_connection'] }
  set connection(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_connection'])) {
      setDirtyFlag()
      this['_connection'] = __v__
    }
  }
  get connectionId(): string | null { return this['_connectionId'] }
  set connectionId(__a__: any) {
    if(__a__ == null) {
      if(this['_connectionId'] == null) { return }
      setDirtyFlag()
      this['_connectionId'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_connectionId'])) {
        setDirtyFlag()
        this['_connectionId'] = __v__
      }
    }
  }
  get schema(): string { return this['_schema'] }
  set schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_schema'])) {
      setDirtyFlag()
      this['_schema'] = __v__
    }
  }
  get table(): string { return this['_table'] }
  set table(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_table'])) {
      setDirtyFlag()
      this['_table'] = __v__
    }
  }
  get typ(): string { return this['_typ'] }
  set typ(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_typ'])) {
      setDirtyFlag()
      this['_typ'] = __v__
    }
  }
  get position(): number { return this['_position'] }
  set position(__a__: any) {
    let __v__ = intReader(0)(__a__)
    if(!_.isEqual(__v__,this['_position'])) {
      setDirtyFlag()
      this['_position'] = __v__
    }
  }
  get reference(): Reference | null { return this['_reference'] }
  set reference(__a__: any) {
    if(__a__ == null) {
      if(this['_reference'] == null) { return }
      setDirtyFlag()
      this['_reference'] = null
      return
    } else {
      setDirtyFlag()
      this['_reference'] = __a__
    }
  }
  get action(): string { return this['_action'] }
  set action(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_action'])) {
      setDirtyFlag()
      this['_action'] = __v__
    }
  }
  get col(): string { return this['_col'] }
  set col(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_col'])) {
      setDirtyFlag()
      this['_col'] = __v__
    }
  }
  get semantics(): string { return this['_semantics'] }
  set semantics(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_semantics'])) {
      setDirtyFlag()
      this['_semantics'] = __v__
    }
  }
  get dflt(): string { return this['_dflt'] }
  set dflt(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_dflt'])) {
      setDirtyFlag()
      this['_dflt'] = __v__
    }
  }
  get isnullable(): boolean { return this['_isnullable'] }
  set isnullable(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_isnullable'])) {
      setDirtyFlag()
      this['_isnullable'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): DatascopeRecord {
    disableDF()
    let cls = new DatascopeRecord()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.id = __a__['id'] == null ? null : __a__['id']
       cls.connection = __a__['connection']
       cls.connectionId = __a__['connectionId'] == null ? null : __a__['connectionId']
       cls.schema = __a__['schema']
       cls.table = __a__['table']
       cls.typ = __a__['typ']
       cls.position = __a__['position']
       cls.reference = __a__['reference'] == null ? null : Reference.fromJson(__a__['reference'])
       cls.action = __a__['action']
       cls.col = __a__['col']
       cls.semantics = __a__['semantics']
       cls.dflt = __a__['dflt']
       cls.isnullable = __a__['isnullable']
    } else {
       doAlert(`DatascopeRecord: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class GroupMapping {
  private '_id': string | null
  private '_dymiumgroup': string
  private '_directorygroup': string
  private '_comments': string

  constructor() {
    this['_id'] = null
    this['_dymiumgroup'] = ''
    this['_directorygroup'] = ''
    this['_comments'] = ''
  }
  get id(): string | null { return this['_id'] }
  set id(__a__: any) {
    if(__a__ == null) {
      if(this['_id'] == null) { return }
      setDirtyFlag()
      this['_id'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_id'])) {
        setDirtyFlag()
        this['_id'] = __v__
      }
    }
  }
  get dymiumgroup(): string { return this['_dymiumgroup'] }
  set dymiumgroup(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_dymiumgroup'])) {
      setDirtyFlag()
      this['_dymiumgroup'] = __v__
    }
  }
  get directorygroup(): string { return this['_directorygroup'] }
  set directorygroup(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_directorygroup'])) {
      setDirtyFlag()
      this['_directorygroup'] = __v__
    }
  }
  get comments(): string { return this['_comments'] }
  set comments(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_comments'])) {
      setDirtyFlag()
      this['_comments'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): GroupMapping {
    disableDF()
    let cls = new GroupMapping()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.id = __a__['id'] == null ? null : __a__['id']
       cls.dymiumgroup = __a__['dymiumgroup']
       cls.directorygroup = __a__['directorygroup']
       cls.comments = __a__['comments']
    } else {
       doAlert(`GroupMapping: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class OperationStatus {
  private '_status': string
  private '_errormessage': string

  constructor() {
    this['_status'] = ''
    this['_errormessage'] = ''
  }
  get status(): string { return this['_status'] }
  set status(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_status'])) {
      setDirtyFlag()
      this['_status'] = __v__
    }
  }
  get errormessage(): string { return this['_errormessage'] }
  set errormessage(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_errormessage'])) {
      setDirtyFlag()
      this['_errormessage'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): OperationStatus {
    disableDF()
    let cls = new OperationStatus()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.status = __a__['status']
       cls.errormessage = __a__['errormessage']
    } else {
       doAlert(`OperationStatus: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Reference {
  private '_schema': string
  private '_table': string
  private '_column': string

  constructor() {
    this['_schema'] = ''
    this['_table'] = ''
    this['_column'] = ''
  }
  get schema(): string { return this['_schema'] }
  set schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_schema'])) {
      setDirtyFlag()
      this['_schema'] = __v__
    }
  }
  get table(): string { return this['_table'] }
  set table(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_table'])) {
      setDirtyFlag()
      this['_table'] = __v__
    }
  }
  get column(): string { return this['_column'] }
  set column(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_column'])) {
      setDirtyFlag()
      this['_column'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Reference {
    disableDF()
    let cls = new Reference()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.schema = __a__['schema']
       cls.table = __a__['table']
       cls.column = __a__['column']
    } else {
       doAlert(`Reference: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

function boolReader(__dflt__) {
  return ((__a__) => {
    if(_.isBoolean(__a__)) {
      return __a__
    }
    doAlert(`boolReader: ${__a__} is not a boolean`)
    if(__a__ === "yes" || __a__ === "true") {
      return true
    }
    if(__a__ === "no" || __a__ === "false") {
      return false
    }
    return __dflt__
  })
}
function intReader(__dflt__) {
  return ((__a__) => {
    if(_.isInteger(__a__)) {
      return __a__
    }
    doAlert(`intReader: ${__a__} is not an integer`)
    if(_.isString(__a__)) {
      let v = parseInt(__a__)
      if(_.isFinite(v)) {
        return v
      }
    }
    return __dflt__
  })
}
function stringReader(__dflt__) {
  return ((__a__) => {
    if(_.isString(__a__)) {
      return __a__
    }
    doAlert(`stringReader: ${__a__} is not a string`)
    return __dflt__
  })
}
function array1Reader(__r__) {
  return ((__a__) => {
    if(!_.isArray(__a__)) {
      doAlert(`arrayReader: ${__a__} is not an array`)
      return []
    }
    return __a__.map(__r__)
  })
}

let setDirtyFlag = () => { dirtyFlag = true }
let [disableDF,enableDF] = (() => {
    let n = 0
    return [() => {
      if(n === 0) {
        setDirtyFlag = () => {}
        n = 1
      } else {
        n += 1
      }
    },
    () => {
      if(n === 1) {
        setDirtyFlag = () => { dirtyFlag = true }
        n = 0
      } else {
        n -= 1
      }
    }]
})()
