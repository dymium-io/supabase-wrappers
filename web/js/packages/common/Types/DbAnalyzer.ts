// this file is automatically generated.
// !!! DO NOT EDIT !!!

import _ from 'lodash'

import * as Common_52182865 from './Common.ts'

export let dirtyFlag = false
function doAlert(s) { console.log(s) }



export class Arc {
  private '_from_schema': string
  private '_from_table': string
  private '_from_column': string
  private '_to_schema': string
  private '_to_table': string
  private '_to_column': string

  constructor() {
    this['_from_schema'] = ''
    this['_from_table'] = ''
    this['_from_column'] = ''
    this['_to_schema'] = ''
    this['_to_table'] = ''
    this['_to_column'] = ''
  }
  get from_schema(): string { return this['_from_schema'] }
  set from_schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_from_schema'])) {
      setDirtyFlag()
      this['_from_schema'] = __v__
    }
  }
  get from_table(): string { return this['_from_table'] }
  set from_table(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_from_table'])) {
      setDirtyFlag()
      this['_from_table'] = __v__
    }
  }
  get from_column(): string { return this['_from_column'] }
  set from_column(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_from_column'])) {
      setDirtyFlag()
      this['_from_column'] = __v__
    }
  }
  get to_schema(): string { return this['_to_schema'] }
  set to_schema(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_to_schema'])) {
      setDirtyFlag()
      this['_to_schema'] = __v__
    }
  }
  get to_table(): string { return this['_to_table'] }
  set to_table(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_to_table'])) {
      setDirtyFlag()
      this['_to_table'] = __v__
    }
  }
  get to_column(): string { return this['_to_column'] }
  set to_column(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_to_column'])) {
      setDirtyFlag()
      this['_to_column'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Arc {
    disableDF()
    let cls = new Arc()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.from_schema = __a__['from_schema']
       cls.from_table = __a__['from_table']
       cls.from_column = __a__['from_column']
       cls.to_schema = __a__['to_schema']
       cls.to_table = __a__['to_table']
       cls.to_column = __a__['to_column']
    } else {
       doAlert(`Arc: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Column {
  private '_name': string
  private '_position': number
  private '_typ': string
  private '_isNullable': boolean
  private '_default': string | null
  private '_reference': Common_52182865.Reference | null
  private '_semantics': Common_52182865.DataSemantics | null

  constructor() {
    this['_name'] = ''
    this['_position'] = 0
    this['_typ'] = ''
    this['_isNullable'] = false
    this['_default'] = null
    this['_reference'] = null
    this['_semantics'] = null
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get position(): number { return this['_position'] }
  set position(__a__: any) {
    let __v__ = intReader(0)(__a__)
    if(!_.isEqual(__v__,this['_position'])) {
      setDirtyFlag()
      this['_position'] = __v__
    }
  }
  get typ(): string { return this['_typ'] }
  set typ(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_typ'])) {
      setDirtyFlag()
      this['_typ'] = __v__
    }
  }
  get isNullable(): boolean { return this['_isNullable'] }
  set isNullable(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_isNullable'])) {
      setDirtyFlag()
      this['_isNullable'] = __v__
    }
  }
  get default(): string | null { return this['_default'] }
  set default(__a__: any) {
    if(__a__ == null) {
      if(this['_default'] == null) { return }
      setDirtyFlag()
      this['_default'] = null
      return
    } else {
      let __v__ = stringReader('')(__a__)
      if(!_.isEqual(__v__,this['_default'])) {
        setDirtyFlag()
        this['_default'] = __v__
      }
    }
  }
  get reference(): Common_52182865.Reference | null { return this['_reference'] }
  set reference(__a__: any) {
    if(__a__ == null) {
      if(this['_reference'] == null) { return }
      setDirtyFlag()
      this['_reference'] = null
      return
    } else {
      setDirtyFlag()
      this['_reference'] = __a__
    }
  }
  get semantics(): Common_52182865.DataSemantics | null { return this['_semantics'] }
  set semantics(__a__: any) {
    if(__a__ == null) {
      if(this['_semantics'] == null) { return }
      setDirtyFlag()
      this['_semantics'] = null
      return
    } else {
      let __v__ = enumReader(['FamilyName','Email','SSN'],'FamilyName')(__a__)
      if(!_.isEqual(__v__,this['_semantics'])) {
        setDirtyFlag()
        this['_semantics'] = __v__
      }
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Column {
    disableDF()
    let cls = new Column()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.name = __a__['name']
       cls.position = __a__['position']
       cls.typ = __a__['typ']
       cls.isNullable = __a__['isNullable']
       cls.default = __a__['default'] == null ? null : __a__['default']
       cls.reference = __a__['reference'] == null ? null : Common_52182865.Reference.fromJson(__a__['reference'])
       cls.semantics = __a__['semantics'] == null ? null : __a__['semantics']
    } else {
       doAlert(`Column: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Connection {
  private '_typ': Common_52182865.ConnectionType
  private '_address': string
  private '_port': number
  private '_user': string
  private '_password': string
  private '_database': string
  private '_tls': boolean

  constructor() {
    this['_typ'] = 'PostgreSQL'
    this['_address'] = ''
    this['_port'] = 0
    this['_user'] = ''
    this['_password'] = ''
    this['_database'] = ''
    this['_tls'] = false
  }
  get typ(): Common_52182865.ConnectionType { return this['_typ'] }
  set typ(__a__: any) {
    let __v__ = enumReader(['PostgreSQL','MySQL','MariaDB','SqlServer','OracleDB'],'PostgreSQL')(__a__)
    if(!_.isEqual(__v__,this['_typ'])) {
      setDirtyFlag()
      this['_typ'] = __v__
    }
  }
  get address(): string { return this['_address'] }
  set address(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_address'])) {
      setDirtyFlag()
      this['_address'] = __v__
    }
  }
  get port(): number { return this['_port'] }
  set port(__a__: any) {
    let __v__ = intReader(0)(__a__)
    if(!_.isEqual(__v__,this['_port'])) {
      setDirtyFlag()
      this['_port'] = __v__
    }
  }
  get user(): string { return this['_user'] }
  set user(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_user'])) {
      setDirtyFlag()
      this['_user'] = __v__
    }
  }
  get password(): string { return this['_password'] }
  set password(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_password'])) {
      setDirtyFlag()
      this['_password'] = __v__
    }
  }
  get database(): string { return this['_database'] }
  set database(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_database'])) {
      setDirtyFlag()
      this['_database'] = __v__
    }
  }
  get tls(): boolean { return this['_tls'] }
  set tls(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_tls'])) {
      setDirtyFlag()
      this['_tls'] = __v__
    }
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Connection {
    disableDF()
    let cls = new Connection()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.typ = __a__['typ']
       cls.address = __a__['address']
       cls.port = __a__['port']
       cls.user = __a__['user']
       cls.password = __a__['password']
       cls.database = __a__['database']
       cls.tls = __a__['tls']
    } else {
       doAlert(`Connection: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Database {
  private '_name': string
  private '_schemas': Array<Schema>
  private '_refs': Array<Arc>

  constructor() {
    this['_name'] = ''
    this['_schemas'] = []
    this['_refs'] = []
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get schemas(): Array<Schema> { return this['_schemas'] }
  set schemas(__a__: any) {
    setDirtyFlag()
    this['_schemas'] = __a__
  }
  get refs(): Array<Arc> { return this['_refs'] }
  set refs(__a__: any) {
    setDirtyFlag()
    this['_refs'] = __a__
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Database {
    disableDF()
    let cls = new Database()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.name = __a__['name']
       cls.schemas = array1Reader(Schema.fromJson)(__a__['schemas'])
       cls.refs = array1Reader(Arc.fromJson)(__a__['refs'])
    } else {
       doAlert(`Database: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Schema {
  private '_name': string
  private '_isSystem': boolean
  private '_tables': Array<Table>

  constructor() {
    this['_name'] = ''
    this['_isSystem'] = false
    this['_tables'] = []
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get isSystem(): boolean { return this['_isSystem'] }
  set isSystem(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_isSystem'])) {
      setDirtyFlag()
      this['_isSystem'] = __v__
    }
  }
  get tables(): Array<Table> { return this['_tables'] }
  set tables(__a__: any) {
    setDirtyFlag()
    this['_tables'] = __a__
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Schema {
    disableDF()
    let cls = new Schema()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.name = __a__['name']
       cls.isSystem = __a__['isSystem']
       cls.tables = array1Reader(Table.fromJson)(__a__['tables'])
    } else {
       doAlert(`Schema: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

export class Table {
  private '_name': string
  private '_isSystem': boolean
  private '_columns': Array<Column>

  constructor() {
    this['_name'] = ''
    this['_isSystem'] = false
    this['_columns'] = []
  }
  get name(): string { return this['_name'] }
  set name(__a__: any) {
    let __v__ = stringReader('')(__a__)
    if(!_.isEqual(__v__,this['_name'])) {
      setDirtyFlag()
      this['_name'] = __v__
    }
  }
  get isSystem(): boolean { return this['_isSystem'] }
  set isSystem(__a__: any) {
    let __v__ = boolReader(false)(__a__)
    if(!_.isEqual(__v__,this['_isSystem'])) {
      setDirtyFlag()
      this['_isSystem'] = __v__
    }
  }
  get columns(): Array<Column> { return this['_columns'] }
  set columns(__a__: any) {
    setDirtyFlag()
    this['_columns'] = __a__
  }

  toJson(): string { return JSON.stringify(this).split('"_').join('"') }

  static fromJson(__a__: any): Table {
    disableDF()
    let cls = new Table()
    if(typeof __a__ === 'object' && __a__ != null) {
       cls.name = __a__['name']
       cls.isSystem = __a__['isSystem']
       cls.columns = array1Reader(Column.fromJson)(__a__['columns'])
    } else {
       doAlert(`Table: an attempt to initialize from ${__a__}`)
    }
    enableDF()
    return cls
  }
}

function boolReader(__dflt__) {
  return ((__a__) => {
    if(_.isBoolean(__a__)) {
      return __a__
    }
    doAlert(`boolReader: ${__a__} is not a boolean`)
    if(__a__ === "yes" || __a__ === "true") {
      return true
    }
    if(__a__ === "no" || __a__ === "false") {
      return false
    }
    return __dflt__
  })
}
function intReader(__dflt__) {
  return ((__a__) => {
    if(_.isInteger(__a__)) {
      return __a__
    }
    doAlert(`intReader: ${__a__} is not an integer`)
    if(_.isString(__a__)) {
      let v = parseInt(__a__)
      if(_.isFinite(v)) {
        return v
      }
    }
    return __dflt__
  })
}
function stringReader(__dflt__) {
  return ((__a__) => {
    if(_.isString(__a__)) {
      return __a__
    }
    doAlert(`stringReader: ${__a__} is not a string`)
    return __dflt__
  })
}
function array1Reader(__r__) {
  return ((__a__) => {
    if(!_.isArray(__a__)) {
      doAlert(`arrayReader: ${__a__} is not an array`)
      return []
    }
    return __a__.map(__r__)
  })
}
function enumReader(__v__,__dflt__) {
  return ((__a__) => {
    if(!_.isString(__a__)) {
      doAlert(`enumReader: ${__a__} is not a string`)
      return __dflt__
    }
    if(__a__ !== __dflt__ && !_.includes(__v__,__a__)) {
      doAlert(`enumReader: ${__a__} is not in ${__v__}`)
      return __dflt__
    }
    return __a__
  })
}

let setDirtyFlag = () => { dirtyFlag = true }
let [disableDF,enableDF] = (() => {
    let n = 0
    return [() => {
      if(n === 0) {
        setDirtyFlag = () => {}
        n = 1
      } else {
        n += 1
      }
    },
    () => {
      if(n === 1) {
        setDirtyFlag = () => { dirtyFlag = true }
        n = 0
      } else {
        n -= 1
      }
    }]
})()
